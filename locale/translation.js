// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('Buttons');
gettext('Debouncer');
gettext('Not-wire');
gettext('Pull-up');
gettext('Sync');
gettext('Button');
gettext('Button-tic');
gettext('Button_direct');
gettext('Button_direct_tic');
gettext('Button-x01');
gettext('Configurable button (pull-up on/off. Not on/off)');
gettext('FPGA internal pull-up configuration on the input port');
gettext('Sync 1-bit input with the system clock domain');
gettext('D Flip-flop (verilog implementation)');
gettext('Select positive or negative logic for the input (0=positive, 1=negative)');
gettext('Valor genérico constante, de 1 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Puerta XOR');
gettext('Remove the rebound on a mechanical switch');
gettext('1bit register (implemented in verilog)');
gettext('Contador módulo M, ascendente, de 16 bits, con reset ');
gettext('Un bit constante a 1');
gettext('Internal pull-up  \n* 0: OFF\n* 1: ON');
gettext('Synchronization stage');
gettext('Normalization stage\n\n* 0: Wire\n* 1: signal inverted');
gettext('Debouncing stage');
gettext('### Pull-up parameter:\n\n0: No pull-up  \n1: Pull-up activated');
gettext('Only an FPGA pin can  \nbe connected here!!!');
gettext('The pull-up is connected  \nby default');
gettext('Parameter: Initial value');
gettext('System clock');
gettext('Input data');
gettext('Output');
gettext('# D Flip-Flop  \n\nIt stores the input data that arrives at cycle n  \nIts output is shown in the cycle n+1');
gettext('When k=0, it works like a wire  \n(The output is equal to the input)  \nWhen k=1, it act as a not gate\n(The output is the inverse of the input)');
gettext('### Truth table for XOR\n\n| k | input | output | function |\n|---|-------|--------|----------|\n| 0 | 0     |  0     | wire     |\n| 0 | 1     |  1     | wire     |\n| 1 | 0     |  1     | Not      |\n| 1 | 1     |  0     | Not      |');
gettext('Previous input  \nvalue');
gettext('Current input  \nvalue');
gettext('There is a change  \non the input');
gettext('Whenever there is a change in  \nthe input, the counter is started');
gettext('If the counter reaches it maximum  \nvalue, the input is considered stable  \nand it is captured');
gettext('### Time calculation\n\nFor CLK=12MHZ, a 16-bit counter reaches its  \nmaximum every 2 ** 16 * 1/F = 5.5ms aprox  \nIF more time is needed for debouncing,  \nuse a counter with more bits (17, 18...)');
gettext('## Debouncer  \n\nA value is considered stable when  \nthere is no changes during 5.5ms  \naprox. When a value is stable it is  \ncaptured on the output flip-flop');
gettext('Stable output');
gettext('Counter');
gettext('Initial value');
gettext('**Parámetro**: Módulo del contador');
gettext('Button-x02');
gettext('Configurable buttons (pull-up on/off. Not on/off)');
gettext('Separador de bus de 2-bits en dos cables');
gettext('Agregador de 2 cables en un bus de 2-bits');
gettext('Button-x03');
gettext('Separador de bus de 3-bits');
gettext('Agregador de 3 cables en un bus de 3-bits');
gettext('Button-x04');
gettext('Separador de bus de 4-bits en 4 cables');
gettext('Agregador de 4 cables en un bus de 4-bits');
gettext('Button-x07');
gettext('Bus7-Split-4-3: Split the 7-bits bus into two buses of 4 and 3 wires');
gettext('Bus7-Join-4-3: Join the two buses into a 7-bits Bus');
gettext('Button-x08');
gettext('Separador de bus de 8-bits en buses de 4 bits');
gettext('Agregador de 2 buses de 4-bits a bus de 8-bits');
gettext('button-tic-x01');
gettext('Button-tic: Configurable button that emits a tic when it is pressed');
gettext('Rising-edge detector. It generates a 1-period pulse (tic) when a rising edge is detected on the input');
gettext('Biestable de datos (Tipo D). Cuando se recibe un tic por load se captura el dato');
gettext('Puerta NOT');
gettext('Puerta AND');
gettext('Button state signal');
gettext('Tic: button pressed');
gettext('Rising edge detector');
gettext('Pull up on/off');
gettext('Not on/off');
gettext('## Rising edge detector\n\nIt generates a 1-period pulse (tic) when a rising edge is detected on the  \ninput signal');
gettext('Input signal');
gettext('Current signal  \nstate');
gettext('Signal state in the previous  \nclock cycle');
gettext('If the current signal is 1 and its value in  \nthe previous clock cycle was 0, it means  \nthat a rising edge has been detected!  \nThe output es 1\n\nIn any other case the output is 0');
gettext('**Delay**: 0 clock cycles \n\nThere is no delay between the arrival of a rising edge  \nand its detection');
gettext('button-tic-x02');
gettext('Configurable buttons (pull-up on/off. Not on/off) with tic output');
gettext('Bus2-Join-all: Joint two wires into a 2-bits Bus');
gettext('button-tic-x03');
gettext('Button_tic_x3: 3 Configurable buttons that emit a tic when they are pressed');
gettext('Bus3-Split-all: Split the 3-bits bus into three wires');
gettext('Bus3-Join-all: Joint three wires into a 3-bits Bus');
gettext('button-tic-x04');
gettext('Button_tic_x4: 4 Configurable buttons that emit a tic when they are pressed');
gettext('Bus4-Split-all: Split the 4-bits bus into its wires');
gettext('Bus4-Join-all: Join all the wires into a 4-bits Bus');
gettext('button-tic-x08');
gettext('Button_tic_x8: 8 Configurable buttons that emit a tic when they are pressed');
gettext('Bus8-Split-half: Split the 8-bits bus into two buses of the same size');
gettext('Bus8-Join-half: Join the two same halves into an 8-bits Bus');
gettext('Button_direct-x01');
gettext('Direct connection of a button. The button should not have any external circuit');
gettext('Button_direct-x02');
gettext('Direct connection of a bus of buttons. The buttons should not have any external circuit');
gettext('Button_direct-x03');
gettext('Button_direct-x04');
gettext('Button_direct-x08');
gettext('Button_direct_tic_x01');
gettext('Direct connection of a button with tic output. The button should not have any external circuit');
gettext('Button_direct_tic_x02');
gettext('Two buttons with direct connections and tic outputs. The buttons should not have external circuits ');
gettext('Button_direct_tic_x03');
gettext('Three buttons with direct connections and tic outputs. The buttons should not have external circuits ');
gettext('Button_direct_tic_x04');
gettext('Four buttons with direct connections and tic outputs. The buttons should not have external circuits ');
gettext('Button_direct_tic_x07');
gettext('7 buttons with direct connections and tic outputs. The buttons should not have external circuits ');
gettext('Rising-edge-x07: 7 independent Rising edge detectors in paralell');
gettext('Bus7-Split-all: Split the 7-bits bus into its wires');
gettext('Bus7-Join-all: Join all the wires into a 7-bits Bus');
gettext('Button_direct_tic_x08');
gettext('8 buttons with direct connections and tic outputs. The buttons should not have external circuits ');
gettext('Debouncer-x01');
gettext('Edges detector. It generates a 1-period pulse (tic) when either a rising edge or a falling edge is detected on the input');
gettext('XOR gate: two bits input xor gate');
gettext('Edge detector');
gettext('## Edges detector\n\nIt generates a 1-period pulse (tic) when an edge (Rising or falling) is detected on the  \ninput signal');
gettext('The output is 1 if the current value is 1 and the  \nprevious 0, or if the current value is 0 and the  \nprevious 1\n');
gettext('In any other case the output is 0');
gettext('Debouncer-x02');
gettext('Debouncer-x03');
gettext('Remove the rebounds on mechanical switches');
gettext('Debouncer-x04');
gettext('Debouncer-x08');
gettext('Verilog');
gettext('Not-wire-x01');
gettext('Not-wire-x02');
gettext('Not-wire-x03');
gettext('Not-wire-x04');
gettext('Not-wire-x08');
gettext('Not-wire-x01-verilog');
gettext('Select positive or negative logic for the input (0=positive, 1=negative) (Verilog implementation)');
gettext('Not-wire-x02-verilog');
gettext('Not-wire-x03-verilog');
gettext('Not-wire-x04-verilog');
gettext('Not-wire-x08-verilog');
gettext('verilog');
gettext('pull-up-x01');
gettext('pull-up-x02');
gettext('2 FPGA internal pull-ups');
gettext('The pull-ups are connected  \nby default');
gettext('pull-up-x03');
gettext('3 FPGA internal pull-ups');
gettext('pull-up-x04');
gettext('4 FPGA internal pull-ups');
gettext('pull-up-x08');
gettext('8 FPGA internal pull-ups');
gettext('pull-up-x02-verilog');
gettext('2 FPGA internal pull-ups (Verilog implementation)');
gettext('pull-up-x03-verilog');
gettext('3 FPGA internal pull-ups (Verilog implementation)');
gettext('pull-up-x04-verilog');
gettext('4 FPGA internal pull-ups (Verilog implementation)');
gettext('pull-up-x08-verilog');
gettext('8 FPGA internal pull-ups (Verilog implementation)');
gettext('Verilog');
gettext('Sync-x01');
gettext('Sync-x02');
gettext('Sync a 2-bit input with the system clock domain');
gettext('Sync-x03');
gettext('Sync a 3-bit input with the system clock domain');
gettext('Sync-x04');
gettext('Sync a 4-bit input with the system clock domain');
gettext('Sync-x08');
gettext('Sync a 8-bit input with the system clock domain');
gettext('Sync-x01-verilog');
gettext('Sync 1-bit input with the system clock domain (Verilog implementation)');
gettext('Sync-x02-verilog');
gettext('Sync a 2-bit input with the system clock domain (Verilog implementation)');
gettext('Sync-x03-verilog');
gettext('Sync a 3-bit input with the system clock domain (Verilog implementation)');
gettext('Sync-x04-verilog');
gettext('Sync a 4-bit input with the system clock domain (Verilog implementation)');
gettext('Sync-x08-verilog');
gettext('Sync a 8-bit input with the system clock domain (Verilog implementation)');
gettext('CT10');
gettext('TESTs');
gettext('button');
gettext('button-direct');
gettext('button-direct-tic');
gettext('button-tic');
gettext('debouncer');
gettext('ice-build');
gettext('not-wire');
gettext('pull-up');
gettext('sync');
gettext('00-Index');
gettext('# INDEX: IceInputs Collection');
gettext('## Buttons');
gettext('### Button: Generic buttons\n\nThey can be configured using  \nthe pup (pull-up) and not parameters  ');
gettext('### Button_tic: Generic buttons with tic output\n\nGeneric buttons that includes the  \npress output. It emits a tic on press  \nwhen the button is pressed');
gettext('Button-tic-x01');
gettext('Button-tic-x02');
gettext('### Button_direct\n\nButtons that are connected  \ndirectly to the FPGA pins, without  \nexternal pull-up or pull-down\n');
gettext('Button-direct-x01');
gettext('Button-direct-x02');
gettext('Button-direct-x03');
gettext('Button-direct-x04');
gettext('Button-direct-x08');
gettext('### Button_direct_tic\n\nDirect buttons with press output. A tic  \nis emitted when the button is pressed');
gettext('Button-direct-tic-x01');
gettext('Button-direct-tic-x02');
gettext('## Debouncer');
gettext('## Pull-up');
gettext('Pull-up-x01');
gettext('Pull-up-x02');
gettext('Pull-up-x03');
gettext('Pull-up-x04');
gettext('Pull-up-x08');
gettext('## Sync');
gettext('## Not-Wire');
gettext('01-Etapa-2-pull-up');
gettext('02-Etapa-3-sincronizacion');
gettext('03-Etapa-4-normalizacion');
gettext('04-Etapa-5-Antirrebotes');
gettext('05-buttons');
gettext('06-Aplicaciones');
gettext('01-pull-up-x1');
gettext('## Ejemplo 1: Prueba de un pull-up interno  \n\nEl estado del pulsador se muestra en el LED0  \n* Botón no apretado: el LED0 se enciende\n* Botón apretado: El LED0 se apaga');
gettext('02-pull-up-x1-on-off');
gettext('## Ejemplo 2: Habilitando y deshabilitando el pull-up  \n\nCambiando el valor del parámetro on podemos habilitar/deshabilitar el pull-up interno    \nEl estado del botón se muestra en el LED0');
gettext('**Parámetro ON**:  \n* 0: pull-up Desactivado\n* 1: Pull-up Habilitado');
gettext('Los botones SW1 y SW2 de la  \nplaca Alhambra II tienen un pull-down  \nexterno, por lo que el pull-up interno  \nse tiene que deshabilitar');
gettext('03-pull-up-x1-error');
gettext('## Ejemplo 3: Error en la conexión del PULL-UP \n\nLa entrada pin del bloque pull-up SOLO SE PUEDE CONECTAR a un loque de ENTRADA  \nSi se conecta a cualquier otro elemento digital se producirá un ERROR');
gettext('ERROR: No se puede conectar un elemento  \ncomo el INVERSOR por la entrada pin');
gettext('## ¡ESTE CIRCUITO ES INCORRECTO!');
gettext('04-pull-up-x1-two');
gettext('## Ejemplo 4: Probando dos bloques de pull-up  \n\nDos pulsadores se conectan a dos LEDs, y sus pull-ups  \nse activan\n');
gettext('05-pull-up-x2');
gettext('## Ejemplo 5: Dos pulsadores y un bloque pull-up\n\nEl estado de los dos botones se muestra en los LEDs  \nLED0 y LED1');
gettext('Bloque de pull-ups  \n(activado por defecto)');
gettext('Botones');
gettext('LEDs');
gettext('06-pull-up-x4-switches');
gettext('## Ejemplo 6: Probando 4 pull-ups  \n\nConexión de un array de 4 micro-switches.  \nSu estado se muestra en los LEDs 0 - 3\n');
gettext('Interruptores');
gettext('07-sync-x1-icerok-test');
gettext('Detección de pulsación. Emite un tic cada vez que se aprieta el pulsador');
gettext('2 channel icerok probe adaptor');
gettext('Agregador de 2 buses de 6 y 2-bits a bus de 8-bits');
gettext('Valor constante 0, de 6 bits');
gettext('Valor genérico constante, de 6 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('16B memory icerok probe');
gettext('16B memory. Bus interface');
gettext('16 Bytes Synchronous memory');
gettext('Join the fields into one 16B memory bus');
gettext('Split a 16B memory bus into its fields');
gettext('Valor constante 0 para bus de 4 bits');
gettext('Valor genérico constante, de 4 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('D Flip-flop');
gettext('16B memory sample machine. Captura the input data and store it in the memory');
gettext('Puerta OR');
gettext('8-bits register (in verilog)');
gettext('Multiplexor de 2 a 1 de 14 bits');
gettext('Máquina de contar, de 4 bits');
gettext('Biestable de almacenamiento del estado de la máquina');
gettext('Biestable con entradas de Set y Reset síncronas, para poner y quitar notaficaciones de eventos');
gettext('Detector de flancos de subida y bajada. Emite tic por las salidas correspondientes al detecta los flancos');
gettext('Registro de 4 bits con entrada de reset');
gettext('Sumador de un operando de 4 bits con una constante pasada como parámetro (No hay accarreo)');
gettext('Comparador de dos operandos de 4 bits');
gettext('Valor genérico constante (menos 1), de 4 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('16B memory download machine');
gettext('Un bit constante a 0');
gettext('Valor constante 0 para bus de 8 bits');
gettext('Valor genérico constante, de 8 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Multiplexor de 2 a 1 de 8 bits');
gettext('Transmit one character to the STDOUT bus');
gettext('Extract the next signal from the stdout bus');
gettext('10 bits, 2-1 Multiplexor');
gettext('stdout bus joiner (data + tic)');
gettext('Serial transmiter for the stdout bus (1 char buffer). Sysclk parameter');
gettext('stdout bus splitter into data and tic signals');
gettext('Convert the 1-bit next signal into a 10-bit stdout bus');
gettext('Serial transmitter with a buffer for 1 byte');
gettext('1-byte buffer');
gettext('Registro de 8 bits');
gettext('Detector de flanco de subida. Emite un tic cuando detecta un flanco ascendente');
gettext('Serial transmitter with system clock freq parameter');
gettext('## Bloque a probar');
gettext('Dato de entrada (1 bit)  \nCiclo n');
gettext('Dato de salida (1 bit)  \nCiclo n+2');
gettext('## Dato de entrada\n\nTic generado manualmente  \n(mediante la pulsación de un botón)');
gettext('## Analizador Lógico');
gettext('Condición de disparo: Pulso en d');
gettext('Adaptador de 2 canales');
gettext('Sonda iceRok');
gettext('Datos a medir\n* Canal 1: Salida (q)\n* Canal 0: Entrada (d)');
gettext('## Ejemplo 7: Midiendo el bloque Sync con el analizador lógico\n\nAl apretar el pulsador SW1 se genera un tic que \nllega al bloque Sync por su entrada y se dispara el  \nanalizador lógico  \n\nEl mismo pulso se debe ver en la salida del bloque, pero  \nretrasado dos ciclos de reloj');
gettext('**Pulsador-tic**');
gettext('## Icerok-probe machine\n\nMachine for capturing data, storing it in the memory and transmit  \nto the computer by serial port');
gettext('Writing the data to the memory on  \nevery system clock cycle');
gettext('Transmiting the raw memory contents  \nto the computer, by serial port');
gettext('When the sampling is done  \ntransmit the information to  \nthe computer');
gettext('Memory were the data  \nis stored');
gettext('Reading data from memory  \nReading bus status');
gettext('Calculate if the bus can be taken');
gettext('The bus is available');
gettext('This circuits wants  \nto use the bus');
gettext('The bus has been already  \ntaken');
gettext('One cycle after the machine is done  \nthe bus is already taken to write  \nthe bbusy signal to 0 and allow  \nother circuits to use it');
gettext('The output bus is controlled  \nby this circuit (1) or  \nremain untouched (0)');
gettext('The reading machine  \ncan be started');
gettext('## Sample machine\n\nRead the input data, (one byte per clock cycle) and store it into the memory\n\n');
gettext('**Reloj del sistema**');
gettext('**Estado de**  \n**la máquina**');
gettext('Máquina encendida');
gettext('Máquina apagada  \n(rst = 1)');
gettext('Tic de arranque');
gettext('Tic de fin');
gettext('**Contador de ciclos**');
gettext('Número de ciclos  \ncontados');
gettext('Valor  \nincrementado');
gettext('### Salidas');
gettext('Estado de la máquina');
gettext('Ciclo actual');
gettext('Cuenta finalizada');
gettext('Ejecutar el ciclo');
gettext('Número de ciclos  \na contar');
gettext('¿Estamos en el  \nciclo k-1?');
gettext('Solo se hace caso a la  \nentrada next si la  \nmáquina está encendida');
gettext('Nuevo ciclo');
gettext('Si es el ciclo k-1 y  \nse pide un ciclo  \nnuevo: Terminar');
gettext('Apagar la  \nmáquina');
gettext('Ciclo nuevo:  \nincrementar la cuenta');
gettext('El tic de start se saca  \npor exec para que se ejecute  \nel primer ciclo');
gettext('Si la máquina está  \napagada, las señales  \nde ejecución no pueden  \nsalir!');
gettext('Retrasar la señal un ciclo  \nmientras que se detecta si  \nla máquina ha finalizado o no');
gettext('**Tic de apagado**');
gettext('**Tic de encendido**');
gettext('**Inicializar**');
gettext('**Estado de la máquina**');
gettext('## Detector doble: flancos de subida y bajada\n\nSe detectan tanto los flancos de subida como de bajada y se emite los  \ntics por sus salidas correspondientes');
gettext('Señal de  \nentrada');
gettext('Reloj del  \nsistema');
gettext('Reading machine');
gettext('## Download machine\n\nTransmit all the memory contents through the serial port  \nThe bytes are transmited raw (in binary). No ascii encoding  \nThere should be a program running on the computer capable of  \nreading these raw bytes');
gettext('## PUTC: Transmit one character (STDOUT bus)\n\nWhen **idle**, the STDOUT bus crosses the component without modification    \n\nWhen the machine starts, the char is outputed and the state is changed to busy  \nWhen the transmitter is done (tic received in next)  the machine is turned off');
gettext('Start tic: The byte from the  \ninput char is transmited');
gettext('Char to be transmited');
gettext('State of the machine:  \n1: ON: transmitting  \n2: OFF: transparent mode  ');
gettext('If the machine is on  \nand the character has been  \ntransmitted: Turn it off');
gettext('The machine has finished');
gettext('**STDOUT BUS**');
gettext('Not connected');
gettext('**Create the bus**  \nfrom the data and tic signals');
gettext('Transparent mode...  \nor not');
gettext('## STDOUT serial\n\nSerial transmitter for the STDOUT bus\n');
gettext('**STDOUT Bus**  \n* Data to transmit (8 bits)  \n* tic (1 bit)\n* data sent (done tic, 1 bit)');
gettext('Empty Buffer  \n(There is no byte  \nwaiting)');
gettext('Byte stored in the  \nbuffer, waiting to be  \ntransmitted when the  \ntransmitter is ready');
gettext('Buffer state:  \n0: empty  \n1: full');
gettext('Transmitter ready');
gettext('If the transmittter is ready  \nand there is a character  \nin the buffer: Transmit!');
gettext('Serial transmitter state');
gettext('08-sync-x1-pull-up');
gettext('## Ejemplo 8: Pulsador con Pull-up + sincronización  \n\nEl estado del botón se muestra en el LED0  \n* Botón no apretado: LED0 on  \n* Botón apretado: LED0 off');
gettext('El bloque Sync se debe poner  \nsiempre el primero tras el pull-up  \no bien tras el pin de entrada si no  \nhay pull-up');
gettext('09-sync-x8-pull-up');
gettext('## Ejemplo 9: Ocho interruptores con pull-up y sincronización  \n\nEl estado de los interruptores se muestra en los LEDs 0-7  \n');
gettext('Pull-up-x8');
gettext('Sync-x8');
gettext('10-not-wire-x1');
gettext('## Example 10: Probando el bloque Not-wire-x1  \n\nEl estado del botón se muestra por LED0  \n* Botón NO apretado: LED0 apagado  \n* Button apretado: LED0 on encendido');
gettext('Pull-up activado');
gettext('NOT activada');
gettext('11-not-wire-x1-Alhambra-II');
gettext('## Ejemplo 11: Bloque Not-wire-x1 y pulsador de la Alhambra II  \n\nEl **pulsador** de la Alhambra II tiene una **resistencia de pull-down externa**, por lo que  \nsu **lógica es positiva**. Para conectarlo a nuestros circuitos usando todas las etapas  \nhay que **deshabilitar** el **pull-up** y la **puerta NOT**  \n\nEs el mismo circuito que el ejemplo 10, PERO cambiando el valor de los parámetros pull-up  \ny NOT a 0\n\nEl estado del botón se muestra por LED0  \n* Botón NO apretado: LED0 apagado  \n* Button apretado: LED0 on encendido');
gettext('Pull-up desactivado');
gettext('NOT desactivada');
gettext('12-not-wire-x8-swithces');
gettext('## Ejemplo 12: Probando el bloque Not-wire-x8\n\nEl estado de los swithces se muestra en los LEDs 0-7\nThe button state is shown on LEDs 0-7\n\n* Switch on: LED encendido\n* Switch off: LED apagado\n\n');
gettext('Not-wire-x8');
gettext('13-debouncer-counter');
gettext('Contador módulo M, ascendente, de 8 bits, con reset ');
gettext('## Ejemplo 13: Circuito detector de rebotes\n\nContar el número de flancos de subida detectados. Si no hubiese  \nrebotes, cada vez que se aprieta el pulsador el contador se  \nincrementaría en una unidad. Al haber rebotes, el contador se  \nincrementa varias veces con cada pulsador');
gettext('### Procesamiento de la entrada\n\nObtener la señal normalizada del  \npulsador (salida etapa 4)');
gettext('Pulsador de entrada');
gettext('Etapa 2: Pull-up');
gettext('Etapa 3: Sync');
gettext('Etapa 4: Normalización');
gettext('### Analizador lógico\n\nSacar la señal por el pin D0 para  \nrealizar lecturas con el analizador lógico');
gettext('Contador de flancos');
gettext('Detector de flanco\nde subida');
gettext('Poner a 0 el contador');
gettext('14-debouncer-x1');
gettext('## Ejemplo 14: Prueba del bloque Debouncer-x1\n\nEl estado del pulsador conectado se muestra por el LED0');
gettext('### Etapa 2\nPull-up interno');
gettext('### Etapa 3\nSincronización');
gettext('### Etapa 4\n\nNormalización');
gettext('### Etapa 5\n\nAntirrebotes');
gettext('Señal de estado');
gettext('15-debouncer-counter-2');
gettext('## Ejemplo 15: Circuito detector de rebotes\n\nComprobar que NO HAY NINGÚN rebote cuando se usa el bloque  \nantirrebotes con el detector de rebotes\n\nAl apretar el pulsador el contador se debe incrementar SOLO en 1 unidad');
gettext('Etapa 4:  \nNormalización');
gettext('### Analizador lógico\n\nSacar las señales input0 e input1  \npor los pines D0 y D1 respectivamente  \npara medirlas con el analizador lógico');
gettext('Etapa 5:  \nAntirrebotes');
gettext('Whenever there is a change in  \nthe input, the cuonter is started');
gettext('16-debouncer-x8-switches');
gettext('## Ejemplo 16: Prueba del bloque Debouncer-x8\n\nMostrar el valor de los swithces por los LEDs 0 - 7\n\n* Switch ON: LED encendido\n* Switch OFF: LED apagado');
gettext('Debouncer-x8');
gettext('17-button-x1-Alhambra-II');
gettext('## Ejemplo 17: Un pulsador de la Alhambra II\n\nEl pulsador SW1 de la Alhambra II controla el LED0:\n\n* Al apretarlo el LED0 se enciende\n* Al soltarlo el LED0 se apaga');
gettext('Como el pulsador de la Alhambra II  \nTiene una resistencia de pull-down  \nLos parámetros pup y not tiene que  \nestar a 0.\n\nDato que es su valor por defecto no  \nhace falta añadir nada a los parámetros');
gettext('18-button-x2-Alhambra-II');
gettext('## Ejemplo 18: Dos pulsadores de la Alhambra II\n\nLos pulsadores SW1 y SW2 de la Alhambra II controlan  \nlos LEDs 0 y 1 respectivamente\n\n* Al apretarlos se enciende su LED asociado\n* Al soltarlo se apaga');
gettext('Ambos parámetros se dejan  \na 0, porque los pulsadores de la  \nAlhambra II tiene pull-down externo');
gettext('19-button-x1-direct');
gettext('## Ejemplo 19: Conexión directa de un pulsador\n\nConexión de un pulsador directamente al pin D0,  \nsin usar circuitos externos\n\nLa señal de estado se muestra por el LED0\n\n* Al apretarlo el LED0 se enciende\n* Al soltarlo el LED0 se apaga');
gettext('Para conectar directamente un pulsador  \nhay que activar el pull-up interno y  \nla puerta NOT para que la señal de estado  \ntenga lógica positiva\n\nAmpos parámetros, up y not, se ponene a 1');
gettext('20-button-direct-x1');
gettext('## Ejemplo 20: Conexión directa de un pulsador\n\nConexión de un pulsador directamente al pin D0,  \nsin usar circuitos externos\n\nLa señal de estado se muestra por el LED0\n\n* Al apretarlo el LED0 se enciende\n* Al soltarlo el LED0 se apaga');
gettext('21-button-direct-x8');
gettext('## Ejemplo 21: Conexión directa de 8 switches\n\nConexión de 8 switches. Sus señales de estado se  \nmuestran por los LEDs 0 - 7\n');
gettext('22-button-tic');
gettext('Contador básico, de 4 bits');
gettext('## Ejemplo 22: Incrementando un contador con un pulsador\n\nSe utiliza el pulsador sW1 de la placa Alhambra II para incrementar un   \ncontador de 4 bits, cuya salida se muestra por los LEDs 0 -3  \n\nLa salida press del bloque button-tic se usa para que cada vez que se aprieta el  \npulsador se incremente el contador. La salida de estado (s) se muestra por el  \nLED7\n\n\n');
gettext('Contador de 4 bits');
gettext('Mostrar la cuenta en  \nbinario por los leds');
gettext('Mostrar el estado del pulsador  \npor el LED7');
gettext('**Contador básico**');
gettext('**Valor inicial**');
gettext('**Incremento**');
gettext('23-button-direct-tic');
gettext('Contador módulo M, ascendente, de 3 bits');
gettext('OR-BUS2: OR gate with 2-bits bus input');
gettext('Bus2-Split-all: Split the 2-bits bus into two wires');
gettext('OR2: Two bits input OR gate');
gettext('## Ejemplo 23: Contando las activaciones de switches\n\nEn los LEDs 7-6 se muestra el estado de dos switches externos. Cada vez que cualquiera  \nde los switches se pone a on, se incrementa un contador de 3 bits que se muestra por  \nlos LEDs 0 - 2\n\n');
gettext('Contador de\n3 bits');
gettext('Accionar contador si el  \nboton SW1 o el SW2 se aprietan');
gettext('24-Alhambra-II-01-leds');
gettext('## Ejemplo 24: Pulsadores en LEDs\n\nEl estado de los pulsadores SW1 y SW2 se muestra en los LEDs 0 y 1 de la **Alhmabra II**');
gettext('Button-0x2');
gettext('25-Alhambra-II-02-sonidos');
gettext('Emitir un pitido de duración (ms) y frecuencia (hz) indicada en los parámetros, al recibir un tic');
gettext('Corazon genérico para bombear bits a la frecuencia fijada en Hz (por defecto 1Hz)');
gettext('Temporizador en milisegundos. La señal p está activa durante el tiempo indicado. Por tic se emite un tic al finalizar');
gettext('Multiplicador de cables. Genera un bus de 4 bits, a patir del bit de entrada');
gettext('## Ejemplo 25: Sonidos\n\nCon el pulsador SW1 se emite un sonido corto y se encienden los LEDs 7-4  \nCon el pulsador SW2 se emite un sonido mientras esté pulsado, y se encienden los LEDs 3 - 0  \nSe deben conectar dos zumbadores a los pines D0 y D1  ');
gettext('Señal de estado  \ndel pulsador');
gettext('Tic de tecla apretada:  \nemitir sonido de 50ms de  \nduración');
gettext('Activar sonido de 1Khz');
gettext('**Arranque del**  \n**temporizador**');
gettext('**Salida de pulso**');
gettext('**Salida de tic**');
gettext('**Parametro del timer**  \nmilisegundos a esperar');
gettext('26-Direct-buttons-01-leds');
gettext('## Ejemplo 26: Pulsadores en LEDs\n\nEl estado de los pulsadores D13 y D12 se muestra en los LEDs 0 y 1 de la **Alhmabra II**  \nEstos pulsadores se han conectado directamente a los pines, sin utilizar ningun circuito  \nexterno de pull-up o pull-down');
gettext('Button-direct-0x2');
gettext('27-Direct-buttons-02-sonidos');
gettext('## Ejemplo 27: Sonidos\n\nPrueba de dos pulsadores conectados directamente a los pines D13 y D12 sin circuitos externos de pull-up o pull-down\n\nCon el pulsador D13 se emite un sonido corto y se encienden los LEDs 7-4  \nCon el pulsador D12 se emite un sonido mientras esté pulsado, y se encienden los LEDs 3 - 0  \nSe deben conectar dos zumbadores a los pines D0 y D1  ');
gettext('Button-Direct-tic-x01');
gettext('28-Gamepad-01');
gettext('Copy-8: Copy the input wire and creates a 8 bits Bus output');
gettext('Bus8-Join-all: Join all the wires into a 8-bits Bus');
gettext('## Ejemplo 28: Gamepad. Probando tecla 1\n\nPruebas de la tecla 1 del Gamepad. Al apretarlo se encienden los 8 LEDs');
gettext('Copy-x8');
gettext('29-Gamepad-02');
gettext('OR-BUS4: OR gate with 4-bits bus input');
gettext('OR4: Four bits input OR gate');
gettext('Fijar el brillo constante para el LED');
gettext('Detector de flanco de bajada. Emite un tic cuando detecta un flanco descendente');
gettext('Extractor de 1 bit de un bus de 8 bits');
gettext('Comparador menor que, de dos operandos de 8 bits');
gettext('Contador del sistema, de 8 bits');
gettext('Registro del sistema de 8 bits');
gettext('Demultiplexor de 1 bit, de 3 a 8 (salida de bus)');
gettext('Contador ascendente/descendente de 3 bits');
gettext('Control del brillo con pulsadores up/down');
gettext('Sumador de un operando de 8 bits con una constante pasada como parámetro (No hay accarreo)');
gettext('Comparador de un operando de 8 bits. Se compara si el operando es igual al parámetro');
gettext('Multiplexor de 4 a 1 de 8 bits');
gettext('Corazón de bombeo de tics con periodo paramétrico de milisegundos y entrada de enable');
gettext('## Ejemplo 29: Gamepad. Controlando un LED\n\nControl del movimiento de un LED. Al apretar los pulsadores arriba/abajo  \ndel Gamepad, el LED sube o baja una posición respectivamente. Este control   \nse hace con los tics: sólo se sube/baja una posición por cada pulsación\n\nCon los botones derecha/izquierda se incrementa/decrementa el brillo del  \nLED. Este control se hace con la señal de estado de las teclas (y no por tic)  \nEl tiempo de apretado de cada tecla determina cuanto se incrementa o decrementa  \nel brillo  \n\nCon cada pulsación de la teclase se emite un pitido corto');
gettext('Mover el LED arriba y abajo  \nEl control es por tics  \n(Cada pulsación una posición)');
gettext('Brillo del LED  \nSe controla mediante el tiempo  \nde pulsación');
gettext('### GAMEPAD');
gettext('## Pitido de las pulsaciones\n\nCon cada pulsación de la tecla se emite  \nun pitido corto');
gettext('Posición del LED  \n(0-7)');
gettext('Demultiplexor 1 - 8  \n(Mostrar la señal actual en el  \nLED determinado por sel)');
gettext('Señal PWM con el brillo  \ndel LED');
gettext('Registro con incremento/decremento');
gettext('Controlador de brillo  \nSe incrementa/decrementa según  \nel tiempo de pulsación');
gettext('**Unidad de PWM**  \n\n* Frecuencia: 91.53 Hz  \n* Resolución: prescaler de 9 bits: 42.67us  \n* Aplicación: Control intensidad en LEDs');
gettext('**Registro W**');
gettext('**Registro buffer**');
gettext('**Contador de 8 bits**');
gettext('Señal de ov: el contador  \nvuelve a comenzar desde 0  \n');
gettext('Comienza un nuevo  \nperiodo de PWM');
gettext('Valores desde 0 hasta 255');
gettext('Mientras que CONT < W (Anchura pulso)  \nPWM es 1. Cuando CONT >= w, PWM es 0');
gettext('**Señal PWM**');
gettext('Salida registrada  \n(Para cumplir normas  \ndel diseño síncrono)');
gettext('Registro que contiene la  \nanchura (8 bits) del pulso');
gettext('Almacena el valor de la anchura del pulso  \ninntroducida por el usuario. Se guarda en un  \nregistro temporal hasta que al comenzar el  \nsiguiente ciclo de PWM se carga en el registro W');
gettext('El valor del registro sólo se puede actualizar al  \ncomienzo del periodo de PWM para garantizar que  \nel pulso tiene anchura fija en ese periodo');
gettext('Desde fuera se escribir en este registro  \na la velocidad que se quiera, pero se  \ngarantiza que el registro W sólo se  \nactualiza al comienzo de cada ciclo de PWM');
gettext('Sacar el bit de mayor  \npeso del contador');
gettext('Registro  \nprincipal');
gettext('Incremento');
gettext('Decremento');
gettext('top = 1 cuando se  \nha llegado al límite  \nsuperior');
gettext('¿Contador = Max?');
gettext('¿Contador = Min?');
gettext('bott = 1 cuando se  \nha llegado al límite  \ninferior');
gettext('Registro inicializado  \ncon el valor máximo');
gettext('**Brillo**');
gettext('**Incrementos**  \n**del brillo**');
gettext('**Casos en los que NO se incrementa el brillo:**  \n\nEn esos casos se deshabilita el corazón');
gettext('El brillo está al máximo y se está  \napretando el botón de UP');
gettext('El brillo está al mínimo y se está  \napretando el botón de DOWN');
gettext('Deshabilitar  \ncorazón');
gettext('30-Arduino-Joystick-01');
gettext('## Ejemplo 30: Arduino Joystick. Probando tecla A\n\nPruebas de la tecla A del Joystick. Al apretarla se encienden todos los LEDs');
gettext('31-Arduino-Joystick-02');
gettext('Bus8-Split-all: Split the 8-bits bus into its wires');
gettext('Biestable de cambio (Tipo T). Cuando se recibe un tic cambia de estado');
gettext('OR-BUS7: OR gate with 7-bits bus input');
gettext('Or7: Seven bits input OR gate');
gettext('OR3: Three bits input OR gate');
gettext('## Ejemplo 31: Arduino Joystick. Botones y LEDs\n\nCada vez que se aprieta uno de los 7 botones del Arduino Joystick se cambia el  \nestado de su LED asociado (0-6). Además se emite un pitido corto por cada pulsación\n\nEl LED7 se enciende si alguno de los pulsadores está apretado');
gettext('Button-direct-tic-x07');
gettext('Mostrar si hay algún botón  \napretado');
gettext('Emitir un pitido corto si hay se  \nha apretado alguno de los pulsadores');
gettext('Cambiar los LEDs de estado si  \nse ha pulsado su tecla correspondiente');
gettext('Biestables T');
gettext('32-Edubasica-01');
gettext('Copy-3: Copy the input wire and creates a 3 bits Bus output');
gettext('## Ejemplo 32: Edubásica. Botón y LEDs\n\nPrueba del pulsador de la tarjeta Edubásica. Al apretarlo  \nse encienden los tres LEDs que tiene: Verde, amarillo y Rojo');
gettext('LED verde');
gettext('LED Amarillo');
gettext('LED Rojo');
gettext('button-x1');
gettext('Copy-x3');
gettext('33-Edubasica-02');
gettext('## Ejemplo 33: Edubásica. Rotación de LEDs\n\nCada vez que se aprieta el pulsador se enciende el siguiente  \nLED, siguiendo la secuencia: Verde, amarillo, rojo');
gettext('34-Edchina-01');
gettext('## Ejemplo 34: Edchina. Botones y LEDs\n\nEncender los 3 LEDs cuando se aprieta el pulsador');
gettext('35-Edchina-02');
gettext('## Ejemplo 35: Edchina. Rotación de LEDs y colores\n\nCon un pulsador se cambia el color del LED tricolor entre rojo, azul y verde.  \nCon el otro pulsador se enciende el siguiente led, siguiendo la secuencia  \nRojo-amarillo-verde. Con la pulsación de cada botón se emite un pitido corto');
gettext('button-tic-x2');
gettext('### Rotación del LED Tri-color');
gettext('### Rotación para LEDs Rojo-Amarillo-Verde');
gettext('### Emitir sonido al pulsar algún botón');
gettext('36-Fenderino-Guitar-01');
gettext('Copy-4: Copy the input wire and creates a 4 bits Bus output');
gettext('## Ejemplo 36: Fenderino Guitar Shield. Pulsador y LEDs\n\nPrueba \"Hola mundo\": Encender los LEDs cuando se aprieta el pulsador  \n(El primer pulsador situado en la base de la guitarra)  ');
gettext('Button-direct-x1');
gettext('Copy-x4');
gettext('37-Fenderino-Guitar-02');
gettext('Emitir un tono (onda cuadrada) definido por su divisor');
gettext('Codificador de 8 a 3, con prioridad. La salida zero se activa cuando ninguna entrada está activada');
gettext('NOT gate (Verilog implementation)');
gettext('Two bits input And gate');
gettext('Circuito combinacional de 3 entradas y 16 salidas');
gettext('Copy-2: Copy the input wire twice and generate a 2 bits Bus output');
gettext('## Ejemplo 37: Fenderino Guitar Shield. Sonidos\n\nCada una de las 8 teclas tiene asignada una nota musical que se toca  \nmientras la tecla esté pulsada. Las notas altas tienen prioridad  \nAl apretar cualquier tecla se encienden dos LEDs  \nEl estado del switch se muestra en otros dos LEDs  \n\n');
gettext('Copy-x2');
gettext('button-direct-x8');
gettext('Codificador 8-3');
gettext('Tabla con la asignación  \nentre Tecla - Nota');
gettext('Alguna tecla se ha  \npulsador');
gettext('Encender los LEDs al  \napretar una tecla');
gettext('Si no hay teclas apretadas  \nse saca 0 por el zumbador');
gettext('Generar la nota');
gettext('Teclado de la guitarra');
gettext('### Mostrar el Switch en los LEDs');
gettext('Input');
gettext('38-Lalebot-shield1-01');
gettext('4bits constant value: 0');
gettext('Generic: 4-bits generic constant (0-15)');
gettext('## Ejemplo 38: LaleBot-Shield-1. Prueba de pulsador\n\nAl apretar el pulsador D4 se encienden los dos LEDs en verde');
gettext('LED1: Verde');
gettext('LED2: Verde');
gettext('LED2: Azul');
gettext('LED2: Rojo');
gettext('LED1: Azul');
gettext('LED1: Rojo');
gettext('Apagar las otras componentes  \nde los LEDs tri-color');
gettext('39-Lalebot-shield1-02');
gettext('Demultiplexor de 3 bits, de 1 a 2');
gettext('## Ejemplo 39: LaleBot-Shield-1. Pulsadores y swithces\n\nLos tres pulsadores de la placa determinal el color (Rojo, verde, azul). Este canal de color se  \nlleva bien directamente a los leds tri-color o a los LEDs de la Alhambra II según el estado  \nde los switches. El switch0 está asociado al LED tri-color derecho y el switch 1 al izquierdo  \nCuando el switch está a 1 el color se muestra por los LEDs de la alhambra II, y cuando está a 0  \npor el LED tri-color');
gettext('Button-direct-x3');
gettext('Button-direct-x2');
gettext('### Lectura de pulsadores');
gettext('### Lectura de Switches');
gettext('mostrar el estado de los  \nswitches en los LEDs 0 y 7');
gettext('Demux 1-2');
gettext('### LEDs de la Alhambra II');
gettext('### LED tri-color Izquierdo');
gettext('40-Lalebot-shield2-01');
gettext('## Ejemplo 40: LaleBot-Shield-2. Test\n\nCada vez que se aprieta el pulsador se emite un pitido corto y se cambian de estado los  \nLEDs rojo y verde de la placa');
gettext('Button-x1');
gettext('Biestable T');
gettext('41-Lalebot-shield3-01');
gettext('## Ejemplo 41: LaleBot-Shield-3. Test\n\nAl apretar el pulsador se emite un pitido corto por el zumbador  \ny se cambia el estado del LED (y de los 8 de la Alhambra II)');
gettext('### Emitir pitido al apretar pulsador');
gettext('Button-tic-x1');
gettext('42-IceBreaker-Dip-Switch-01');
gettext('OR-BUS8: OR gate with 8-bits bus input');
gettext('OR8: Eight bits input OR gate');
gettext('## Ejemplo 42: IceBreaker DIP-Swith. Test\n\nEl estado de los switches se muestra por los 8 LEDs de la Alhambra II  \nCada vez que un switch pasa de 0 a 1 se emite un pitido corto');
gettext('Button-tic-x08');
gettext('Micro-interruptores');
gettext('43-IceSugar-Pmod-Switch-01');
gettext('## Ejemplo 43: IceSugar PMOD-Switch. Test\n\nEl estado de los switches se muestra por los 8 LEDs de la Alhambra II  \nCada vez que un switch pasa de 0 a 1 se emite un pitido corto');
gettext('44-Capacitivo-01');
gettext('## Ejemplo 44: Pulsador capacitivo. Test\n\nEl estado del pulsador capacitivo se muestra en los 8 LEDs de la  \nAlhambra II. Cada vez que se pulsa se emite un pitido corto');
gettext('45-Pulsador-casero-01');
gettext('## Ejemplo 45: Pulsador casero\n\nPrueba de funcionamiento del pulsador casero\n\nEl estado del pulsador se muestra por los 8 LEDs de la Alhambra II  \nCon cada pulsación se emite un pitido corto de 50ms de duración  ');
gettext('Button-direct-tic-x1');
gettext('Sync-x1');
gettext('Alhambra-II');
gettext('01-icerok-delay-measurement');
gettext('## Unit Under test');
gettext('Input data (1 bit)  \nCycle n');
gettext('Output data (1 bit)  \nCycle n+2');
gettext('## Input data\n\n1-period pulse generated manually  \n(by pressing the button)');
gettext('## Logic analyzer');
gettext('Trigger condition: pulse in d');
gettext('2 channel adaptor');
gettext('Icerok probe');
gettext('Data being measured:  \n* Channel 1: Output (q)\n* Channel 0: Input (d)');
gettext('# Sync: Manual testing with Logic Analyzer\n\nWhen the button sw1 is pressed, a 1-period pulse  \nis written to the Sync Block input (d). Also, the  \nlogic analyzer is triggered  \n\nThe same pulse should be seen on the q output, but  \ntwoe cycles later');
gettext('01-button-x1-Alhambra-II');
gettext('## Ejemplo 1: Using the button of the Alhambra-II board\n\nThe LED0 is controlled by the SW1 pushbutton\n\n* When SW1 is pressed, the LED0 is turned on\n* When SW1 is released, the LED0 is turned off\n');
gettext('As the Alhambra-II pushbuttons has a  \npull-down resistor, the pup and not   \nparameters are set to 0 (default value)  \n');
gettext('02-button-x2-Alhambra-II');
gettext('## Example 2: Two buttons of the Alhambra II board\n\nLEDs 0 and 1 are controlled by the sw1 and sw2 pushbuttons  \n');
gettext('03-button-external-button');
gettext('## Example 3: Direct connection of an external pushbutton\n\nDirect connection of an external pushbutton to D0 pin.  \nNo external circuitos (pull-up or pull-down) used\n\nThe input signal is shown on the LED0\n');
gettext('For a direct connection the internal pull-up has to  \nbe enabled and the not gate activated, so that the  \noutput signal has positive logic\n\nBoth parameters, pup and not, should be set to 1');
gettext('01-button-direct-x1');
gettext('## Example 1: Direct connection of a pushbutton\n\nDirect connection of a pushbutton to D0 pin. No external  \ncircuits are used (pull-up or pull-down)\n\nThe signal is shown on LED0\n');
gettext('02-button-direct--8-switches');
gettext('## Example 2: Directo connection of 8 swtiches\n\nConnection of 8 switches. The signals are shown on  \nLEDs 0 - 7\n\n');
gettext('01-button-direct-tic-x2-led');
gettext('## Example 1: Counting the times two buttons are pressed\n\nThe signals from the buttons are shown on leds 7 - 6. Every time a button is  \npressed the counter is incremented by 1. This count is shown on leds 0 - 2');
gettext('3-bits counter');
gettext('Increment the counter on every  \nbutton press');
gettext('01-button-tic-led');
gettext('## Example 1: Button-tic test\n\nWhen the button is pressed, the T flip-flop is toggled and its state is shown  \non LED7. The button state is shown on LED0');
gettext('01-bouncing-test');
gettext('## Example 1: Bouncing test\n\nCircuit for checking the bouncing of a pushbutton. The output from  \nthe last stage (not debounced) is sent to an edge detector. There is  \na counter that counts the rising edges\n\nWhen the button is pressed, if the pushbutton signal was clean, there should be  \nonly one rising edge, and the counter should be increased by one  \n\nBut if there are bounces, there will appear more edges and the counter  \nis incresed by a greather amount\n\nThere is another button for reseting the counter');
gettext('### Input processing\n');
gettext('Input pushbutton');
gettext('Stage:  \nInternal Pull-up');
gettext('Stage:  \nSync');
gettext('### Logic Analycer\n\nThe signal is sent to the D0 pin  \nfor reading it with the Logic analycer\n');
gettext('Rising edges counter');
gettext('Rising edge  \ndetector');
gettext('Stage:  \nPositive logic');
gettext('## Setup\n\n![](https://raw.githubusercontent.com/Obijuan/Cuadernos-tecnicos-FPGAs-libres/master/wiki/CT10-Entradas-Pulsadores/etapa-5-01-intro-3.png)');
gettext('## Video\n\nClick on the image to see the video. The bouncing of the  \nbutton is shown on the LEDs\n\n[![Click to see the youtube video](http://img.youtube.com/vi/kJQ8fN97wJo/0.jpg)](https://www.youtube.com/watch?v=kJQ8fN97wJo)');
gettext('02-debouncer-test');
gettext('## Example 2: Debouncer test\n\nCheck that there is no bouncing when the debouncer  \nblock is used. The same bouncing test circuit as the  \nexample 1 is used  \n\nWhen the button is pressed the counter should be incremented  \nonly by 1\n');
gettext('### Logic Analycer\n\nThe input0 and input1 signals are sent  \nto the pins D1 and D0 respectivelly for  \nbeing meassuted with the Logic analicer \n');
gettext('00-Index');
gettext('01-not-wire-x1');
gettext('## Example 1: Testing the Not-wire-x1 block  \n\nThe button state is shown on LED0  \n* Button not pressed: LED0 off  \n* Button pressed: LED0 on');
gettext('Pull-up ON');
gettext('Add a NOT');
gettext('02-not-wire-x1-pull-down');
gettext('## Example 2: Button with external pull-down  \n\nThis is a general circuit for connecting any button, just by changing  \nthe values of the pull-up and Not parameter. In example 1 a button with no  \nexternal circuit was used. It was needed to enable the pull-up and then the  \nnot gate gor having positive logic\n\nIn this example the button of the Alhambra-II board is used, which have an  \nexternal pull-down. Both the pull-up and not gate have to be disabled\n\nThe button state is shown on LED0  \n* Button not pressed: LED0 off  \n* Button pressed: LED0 on');
gettext('Not gate disabled');
gettext('Internal pull-up disabled');
gettext('SW1 in the  \nAlhambra II board');
gettext('03-not-wire-x8-switches');
gettext('## Example 3: Testing the not-wire-x8 block\n\nThe button state is shown on LEDs 0-7\n\n* Switch on: LED on\n* Switch off: LED off\n\n');
gettext('01-pull-up-x1');
gettext('## Example 1: Testing one pull-up  \n\nThe button state can be seen on the LED0  \n* Button not pressed: LED0 on  \n* Button pressed: LED0 off');
gettext('The pull-up is active by default  \nIt can be disconnected by setting the  \nparameter to 0');
gettext('02-pull-up-x1-deactivation');
gettext('## Example 2: Enabling and disabling one pull-up  \n\nJust change the on parameter for enabling/disabling the internal pull-up  \nThe button state is shown on the LED0  \n');
gettext('**ON parameter**:  \n* 0: pull-up disabled  \n* 1: Pull-up enabled');
gettext('The SW1 and SW2 buttons on  \nthe Alhambra-II board have an external  \npull-down, so the internal pull-up should  \nbe disabled');
gettext('03-pull-up-x1-error');
gettext('## Example 3: Error in pull-up connection \n\nThe input pin of the pull-up block CAN ONLY BE CONNECTED to an input BLOCK  \nIf it is connected to any other digital component an error will show up');
gettext('ERROR: The NOT gate cannot be connected to the  \npull-up input pin');
gettext('## THIS CIRCUIT IS WRONG!');
gettext('04-pull-up-x1-two');
gettext('## Example 4: Testing two pull-up blocks  \n\nTwo buttons are connected to two LEDs, and their pull-ups  \nactivated\n');
gettext('05-pull-up-x2');
gettext('## Example 5: Testing two pull-ups  \n\nThe buttons state is shown on LED0 and LED1');
gettext('The pull-ups are active by default  \nThey can be disconnected by  \nseting the parameter to 0');
gettext('06-pull-up-x3');
gettext('## Example 6: Testing three pull-ups  \n\nThe buttons state is shown on LEDs 0,1 and 2');
gettext('07-pull-up-x4');
gettext('## Example 7: Testing four pull-ups  \n\nThe buttons state is shown on LEDs 0-3');
gettext('08-pull-up-x8');
gettext('## Example 8: Testing eight pull-ups  \n\nThe buttons state is shown on LEDs 0-7');
gettext('ice-build');
gettext('01-sync-x1');
gettext('## Example 1: Testing the sync-x1 block  \n\nThe button state is shown on LED0  \n* Button not pressed: LED0 on  \n* Button pressed: LED0 off');
gettext('The sync block should always  \nbe after the pull-up block if  \nit exist, or after the input pin  \nif there is no pull-up');
gettext('02-sync-x2');
gettext('## Example 2: Testing the sync-x2 block  \n\nThe buttons state is shown on LED0 and LED1  \n* Button not pressed: LED on  \n* Button pressed: LED off');
gettext('03-sync-x3');
gettext('## Example 3: Testing the sync-x3 block  \n\nThe buttons state is shown on LEDs 0-2  \n* Button not pressed: LED on  \n* Button pressed: LED off');
gettext('04-sync-x4');
gettext('## Example 4: Testing the sync-x4 block  \n\nThe buttons state is shown on LEDs 0-3  \n* Button not pressed: LED on  \n* Button pressed: LED off');
gettext('05-sync-x8');
gettext('## Example 8: Testing the sync-x8 block  \n\nThe buttons state is shown on LEDs 0-7  \n* Button not pressed: LED on  \n* Button pressed: LED off');
gettext('04-sync-x4');
